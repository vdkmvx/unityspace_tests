{"uid":"7988f621d114aa8a","name":"POST /tasks","fullName":"tests.5 test_tasks.test_tasks#test_4_create_task","historyId":"06c0abb69fe9de8afbf13e16bdd9c3ae","time":{"start":1694348052742,"stop":1694348052782,"duration":40},"status":"failed","statusMessage":"AssertionError: assert {'error': 'Bad Request', 'message': ['responsibleUserId must be a identifier lower than 2**31 and greater than 0'], 'statusCode': 400} == 200\n +  where {'error': 'Bad Request', 'message': ['responsibleUserId must be a identifier lower than 2**31 and greater than 0'], 'statusCode': 400} = <bound method Response.json of <Response [400]>>()\n +    where <bound method Response.json of <Response [400]>> = <Response [400]>.json","statusTrace":"login_tasks = <requests.sessions.Session object at 0x0000024A12177C90>, name = 'name'\n\n    @allure.title(\"POST /tasks\")\n    @pytest.mark.parametrize('name', valid_names)\n    def test_4_create_task(login_tasks, name):\n        project = login_tasks.get(HOST + '/projects/all-projects').json()[0]\n        project_stage_id = project[\"stages\"][0][\"id\"]\n        response = login_tasks.post(HOST + '/tasks', json={\n            \"name\": name,\n            \"stageId\": project_stage_id,\n            \"order\": 0,\n            \"responsibleUserId\": 0,\n            \"description\": \"string\",\n            \"color\": \"string\",\n            \"dateBegin\": \"string\",\n            \"dateEnd\": \"string\"\n        })\n>       assert response.json() == 200\nE       AssertionError: assert {'error': 'Bad Request', 'message': ['responsibleUserId must be a identifier lower than 2**31 and greater than 0'], 'statusCode': 400} == 200\nE        +  where {'error': 'Bad Request', 'message': ['responsibleUserId must be a identifier lower than 2**31 and greater than 0'], 'statusCode': 400} = <bound method Response.json of <Response [400]>>()\nE        +    where <bound method Response.json of <Response [400]>> = <Response [400]>.json\n\ntests\\5 test_tasks\\test_tasks.py:60: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"database","time":{"start":1694348051749,"stop":1694348051757,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"login_tasks","time":{"start":1694348051758,"stop":1694348052433,"duration":675},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[{"name":"login_tasks::0","time":{"start":1694348052787,"stop":1694348052800,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"database::0","time":{"start":1694348052801,"stop":1694348052801,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests.5 test_tasks"},{"name":"suite","value":"test_tasks"},{"name":"host","value":"WIN-V4MLJNPG1BI"},{"name":"thread","value":"12308-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.5 test_tasks.test_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"name","value":"'name'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"7988f621d114aa8a.json","parameterValues":["'name'"]}
