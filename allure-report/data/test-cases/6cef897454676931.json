{"uid":"6cef897454676931","name":"POST /tasks","fullName":"tests.5 test_tasks.test_tasks#test_4_create_task","historyId":"06c0abb69fe9de8afbf13e16bdd9c3ae","time":{"start":1694356274984,"stop":1694356275049,"duration":65},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":20,"retriesStatusChange":true,"beforeStages":[{"name":"database","time":{"start":1694356208592,"stop":1694356208615,"duration":23},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"login_tasks","time":{"start":1694356273963,"stop":1694356274637,"duration":674},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[{"name":"login_tasks::0","time":{"start":1694356275870,"stop":1694356275894,"duration":24},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"database::0","time":{"start":1694356275926,"stop":1694356275927,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests.5 test_tasks"},{"name":"suite","value":"test_tasks"},{"name":"host","value":"WIN-V4MLJNPG1BI"},{"name":"thread","value":"17680-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.5 test_tasks.test_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"name","value":"'name'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6c85d26104e0a543","status":"passed","time":{"start":1694356119354,"stop":1694356119414,"duration":60}},{"uid":"4b131125e55f45d8","status":"passed","time":{"start":1694356079074,"stop":1694356079136,"duration":62}},{"uid":"1dd47692a067579a","status":"passed","time":{"start":1694355943208,"stop":1694355943270,"duration":62}},{"uid":"2c3b1b5439923fef","status":"passed","time":{"start":1694355854339,"stop":1694355854400,"duration":61}},{"uid":"90da73b047990f36","status":"passed","time":{"start":1694355780646,"stop":1694355780709,"duration":63}},{"uid":"8df67294cdbd3f5c","status":"passed","time":{"start":1694355590686,"stop":1694355590755,"duration":69}},{"uid":"d5cad426fc906240","status":"passed","time":{"start":1694355560576,"stop":1694355560637,"duration":61}},{"uid":"7f7d5228345c351c","status":"passed","time":{"start":1694355508693,"stop":1694355508751,"duration":58}},{"uid":"9f019652496d0341","status":"passed","time":{"start":1694355487086,"stop":1694355487150,"duration":64}},{"uid":"5ee580f2c751e4c2","status":"passed","time":{"start":1694355438480,"stop":1694355438551,"duration":71}},{"uid":"9f8cc5211b9a11fa","status":"passed","time":{"start":1694355401561,"stop":1694355401624,"duration":63}},{"uid":"694551c1f1a237b6","status":"passed","time":{"start":1694355393831,"stop":1694355393898,"duration":67}},{"uid":"74f3c643c394b8b2","status":"failed","statusDetails":"AssertionError: assert 201 == 200\n +  where 201 = <Response [201]>.status_code","time":{"start":1694355309111,"stop":1694355309177,"duration":66}},{"uid":"4f83f2119976a4a8","status":"failed","statusDetails":"AssertionError: assert {'history': {'id': 3389, 'projectName': None, 'state': None, 'taskId': 7074, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T14:14:55.423Z', ...}} == 200\n +  where {'history': {'id': 3389, 'projectName': None, 'state': None, 'taskId': 7074, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T14:14:55.423Z', ...}} = <bound method Response.json of <Response [201]>>()\n +    where <bound method Response.json of <Response [201]>> = <Response [201]>.json","time":{"start":1694355295377,"stop":1694355295442,"duration":65}},{"uid":"1e14131da45d7616","status":"failed","statusDetails":"AssertionError: assert {'history': {'id': 3367, 'projectName': None, 'state': None, 'taskId': 7030, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T12:16:42.714Z', ...}} == 200\n +  where {'history': {'id': 3367, 'projectName': None, 'state': None, 'taskId': 7030, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T12:16:42.714Z', ...}} = <bound method Response.json of <Response [201]>>()\n +    where <bound method Response.json of <Response [201]>> = <Response [201]>.json","time":{"start":1694348202666,"stop":1694348202736,"duration":70}},{"uid":"99120954f230b5b5","status":"failed","statusDetails":"AssertionError: assert {'history': {'id': 3355, 'projectName': None, 'state': None, 'taskId': 7007, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T12:16:08.889Z', ...}} == 200\n +  where {'history': {'id': 3355, 'projectName': None, 'state': None, 'taskId': 7007, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T12:16:08.889Z', ...}} = <bound method Response.json of <Response [201]>>()\n +    where <bound method Response.json of <Response [201]>> = <Response [201]>.json","time":{"start":1694348168844,"stop":1694348168909,"duration":65}},{"uid":"7f241a5b1ba2c6c3","status":"failed","statusDetails":"AssertionError: assert {'message': 'Internal server error', 'statusCode': 500} == 200\n +  where {'message': 'Internal server error', 'statusCode': 500} = <bound method Response.json of <Response [500]>>()\n +    where <bound method Response.json of <Response [500]>> = <Response [500]>.json","time":{"start":1694348108631,"stop":1694348108681,"duration":50}},{"uid":"2e06d077c5b0b5e5","status":"failed","statusDetails":"AssertionError: assert {'message': 'Internal server error', 'statusCode': 500} == 200\n +  where {'message': 'Internal server error', 'statusCode': 500} = <bound method Response.json of <Response [500]>>()\n +    where <bound method Response.json of <Response [500]>> = <Response [500]>.json","time":{"start":1694348078064,"stop":1694348078132,"duration":68}},{"uid":"7988f621d114aa8a","status":"failed","statusDetails":"AssertionError: assert {'error': 'Bad Request', 'message': ['responsibleUserId must be a identifier lower than 2**31 and greater than 0'], 'statusCode': 400} == 200\n +  where {'error': 'Bad Request', 'message': ['responsibleUserId must be a identifier lower than 2**31 and greater than 0'], 'statusCode': 400} = <bound method Response.json of <Response [400]>>()\n +    where <bound method Response.json of <Response [400]>> = <Response [400]>.json","time":{"start":1694348052742,"stop":1694348052782,"duration":40}},{"uid":"753e38de53c197de","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1694348035926,"stop":1694348035967,"duration":41}}],"categories":[],"tags":[]},"source":"6cef897454676931.json","parameterValues":["'name'"]}
