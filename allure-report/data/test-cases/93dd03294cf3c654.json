{"uid":"93dd03294cf3c654","name":"POST /tasks","fullName":"tests.5 test_tasks.test_tasks#test_4_create_task","historyId":"a8a96cb31656508bec6132c407ad851b","time":{"start":1694356274908,"stop":1694356274982,"duration":74},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":20,"retriesStatusChange":true,"beforeStages":[{"name":"database","time":{"start":1694356208592,"stop":1694356208615,"duration":23},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"login_tasks","time":{"start":1694356273963,"stop":1694356274637,"duration":674},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[{"name":"login_tasks::0","time":{"start":1694356275870,"stop":1694356275894,"duration":24},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"database::0","time":{"start":1694356275926,"stop":1694356275927,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests.5 test_tasks"},{"name":"suite","value":"test_tasks"},{"name":"host","value":"WIN-V4MLJNPG1BI"},{"name":"thread","value":"17680-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.5 test_tasks.test_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"name","value":"'1'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"215944bc9cae4146","status":"passed","time":{"start":1694356119285,"stop":1694356119351,"duration":66}},{"uid":"9ba8e89d4417f181","status":"passed","time":{"start":1694356079001,"stop":1694356079072,"duration":71}},{"uid":"422096e8401e6b5f","status":"passed","time":{"start":1694355943142,"stop":1694355943206,"duration":64}},{"uid":"d7591a4d81a85f83","status":"passed","time":{"start":1694355854267,"stop":1694355854336,"duration":69}},{"uid":"d20cd8af7c129024","status":"passed","time":{"start":1694355780574,"stop":1694355780644,"duration":70}},{"uid":"5f088bb20814f187","status":"passed","time":{"start":1694355590609,"stop":1694355590683,"duration":74}},{"uid":"6356d26b97115ab8","status":"passed","time":{"start":1694355560511,"stop":1694355560574,"duration":63}},{"uid":"566521313ce39188","status":"passed","time":{"start":1694355508624,"stop":1694355508690,"duration":66}},{"uid":"ba2130fa1a827596","status":"passed","time":{"start":1694355487018,"stop":1694355487085,"duration":67}},{"uid":"50c183de47d922af","status":"passed","time":{"start":1694355438405,"stop":1694355438477,"duration":72}},{"uid":"3e90dad46a63cb8f","status":"passed","time":{"start":1694355401494,"stop":1694355401559,"duration":65}},{"uid":"2fb4967c89b2b77f","status":"passed","time":{"start":1694355393762,"stop":1694355393829,"duration":67}},{"uid":"679ec725c71e4516","status":"failed","statusDetails":"AssertionError: assert 201 == 200\n +  where 201 = <Response [201]>.status_code","time":{"start":1694355309044,"stop":1694355309107,"duration":63}},{"uid":"814fc25960d4a016","status":"failed","statusDetails":"AssertionError: assert {'history': {'id': 3388, 'projectName': None, 'state': None, 'taskId': 7073, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T14:14:55.346Z', ...}} == 200\n +  where {'history': {'id': 3388, 'projectName': None, 'state': None, 'taskId': 7073, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T14:14:55.346Z', ...}} = <bound method Response.json of <Response [201]>>()\n +    where <bound method Response.json of <Response [201]>> = <Response [201]>.json","time":{"start":1694355295268,"stop":1694355295374,"duration":106}},{"uid":"67271b86fe24b2ea","status":"failed","statusDetails":"AssertionError: assert {'history': {'id': 3366, 'projectName': None, 'state': None, 'taskId': 7029, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T12:16:42.640Z', ...}} == 200\n +  where {'history': {'id': 3366, 'projectName': None, 'state': None, 'taskId': 7029, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T12:16:42.640Z', ...}} = <bound method Response.json of <Response [201]>>()\n +    where <bound method Response.json of <Response [201]>> = <Response [201]>.json","time":{"start":1694348202593,"stop":1694348202661,"duration":68}},{"uid":"6ac4d57259e73350","status":"failed","statusDetails":"AssertionError: assert {'history': {'id': 3354, 'projectName': None, 'state': None, 'taskId': 7006, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T12:16:08.807Z', ...}} == 200\n +  where {'history': {'id': 3354, 'projectName': None, 'state': None, 'taskId': 7006, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T12:16:08.807Z', ...}} = <bound method Response.json of <Response [201]>>()\n +    where <bound method Response.json of <Response [201]>> = <Response [201]>.json","time":{"start":1694348168758,"stop":1694348168839,"duration":81}},{"uid":"af6cfb33269a3ce9","status":"failed","statusDetails":"AssertionError: assert {'message': 'Internal server error', 'statusCode': 500} == 200\n +  where {'message': 'Internal server error', 'statusCode': 500} = <bound method Response.json of <Response [500]>>()\n +    where <bound method Response.json of <Response [500]>> = <Response [500]>.json","time":{"start":1694348108571,"stop":1694348108626,"duration":55}},{"uid":"13e7e7520ab53f06","status":"failed","statusDetails":"AssertionError: assert {'message': 'Internal server error', 'statusCode': 500} == 200\n +  where {'message': 'Internal server error', 'statusCode': 500} = <bound method Response.json of <Response [500]>>()\n +    where <bound method Response.json of <Response [500]>> = <Response [500]>.json","time":{"start":1694348077979,"stop":1694348078058,"duration":79}},{"uid":"474d659a1e25a316","status":"failed","statusDetails":"AssertionError: assert {'error': 'Bad Request', 'message': ['responsibleUserId must be a identifier lower than 2**31 and greater than 0'], 'statusCode': 400} == 200\n +  where {'error': 'Bad Request', 'message': ['responsibleUserId must be a identifier lower than 2**31 and greater than 0'], 'statusCode': 400} = <bound method Response.json of <Response [400]>>()\n +    where <bound method Response.json of <Response [400]>> = <Response [400]>.json","time":{"start":1694348052695,"stop":1694348052738,"duration":43}},{"uid":"e73118871cd1a02","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1694348035863,"stop":1694348035922,"duration":59}}],"categories":[],"tags":[]},"source":"93dd03294cf3c654.json","parameterValues":["'1'"]}
