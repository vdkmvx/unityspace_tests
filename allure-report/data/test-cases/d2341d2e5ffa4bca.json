{"uid":"d2341d2e5ffa4bca","name":"POST /tasks","fullName":"tests.5 test_tasks.test_tasks#test_6_create_task","historyId":"d4ef952c93170545b958361dd2ba9adb","time":{"start":1694356275166,"stop":1694356275215,"duration":49},"status":"failed","statusMessage":"AssertionError: assert 500 == 400\n +  where 500 = <Response [500]>.status_code","statusTrace":"login_tasks = <requests.sessions.Session object at 0x000001F8F3BCD110>\norder = 122222222222222222...2222222222222222222\n\n    @allure.title(\"POST /tasks\")\n    @pytest.mark.parametrize(\"order\", invalid_orders)\n    def test_6_create_task(login_tasks, order):\n        project = login_tasks.get(HOST + \"/projects/all-projects\").json()[0]\n        project_stage_id = project[\"stages\"][0][\"id\"]\n        response = login_tasks.post(\n            HOST + \"/tasks\",\n            json={\n                \"name\": \"Задача\",\n                \"stageId\": project_stage_id,\n                \"order\": order,\n                \"responsibleUserId\": None,\n                \"description\": \"string\",\n                \"color\": \"string\",\n                \"dateBegin\": time_now(),\n                \"dateEnd\": time_now(),\n            },\n        )\n>       assert response.status_code == 400\nE       assert 500 == 400\nE        +  where 500 = <Response [500]>.status_code\n\ntests\\5 test_tasks\\test_tasks.py:119: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":9,"retriesStatusChange":false,"beforeStages":[{"name":"database","time":{"start":1694356208592,"stop":1694356208615,"duration":23},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"login_tasks","time":{"start":1694356273963,"stop":1694356274637,"duration":674},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[{"name":"login_tasks::0","time":{"start":1694356275870,"stop":1694356275894,"duration":24},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"database::0","time":{"start":1694356275926,"stop":1694356275927,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests.5 test_tasks"},{"name":"suite","value":"test_tasks"},{"name":"host","value":"WIN-V4MLJNPG1BI"},{"name":"thread","value":"17680-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.5 test_tasks.test_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"order","value":"12222222222222222222222222222222222222222222222222222222222222222222222222222222222"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"756988a18d13387a","status":"failed","statusDetails":"AssertionError: assert 500 == 400\n +  where 500 = <Response [500]>.status_code","time":{"start":1694356119520,"stop":1694356119564,"duration":44}},{"uid":"3f7f7c087fe001b4","status":"failed","statusDetails":"AssertionError: assert 500 == 400\n +  where 500 = <Response [500]>.status_code","time":{"start":1694356079249,"stop":1694356079293,"duration":44}},{"uid":"13ce0dc52f453723","status":"failed","statusDetails":"AssertionError: assert 500 == 400\n +  where 500 = <Response [500]>.status_code","time":{"start":1694355943383,"stop":1694355943429,"duration":46}},{"uid":"758d4c52be30abc9","status":"failed","statusDetails":"AssertionError: assert 500 == 400\n +  where 500 = <Response [500]>.status_code","time":{"start":1694355854514,"stop":1694355854561,"duration":47}},{"uid":"548a8a4a4bea96e","status":"failed","statusDetails":"AssertionError: assert 500 == 400\n +  where 500 = <Response [500]>.status_code","time":{"start":1694355780823,"stop":1694355780871,"duration":48}},{"uid":"691303a89a2159a6","status":"failed","statusDetails":"AssertionError: assert 500 == 400\n +  where 500 = <Response [500]>.status_code","time":{"start":1694355590878,"stop":1694355590926,"duration":48}},{"uid":"20542c65bc95285","status":"failed","statusDetails":"AssertionError: assert 500 == 400\n +  where 500 = <Response [500]>.status_code","time":{"start":1694355560752,"stop":1694355560798,"duration":46}},{"uid":"10493dc477e47fed","status":"failed","statusDetails":"AssertionError: assert 500 == 400\n +  where 500 = <Response [500]>.status_code","time":{"start":1694355508866,"stop":1694355508909,"duration":43}},{"uid":"1dd9506931eb40eb","status":"failed","statusDetails":"AssertionError: assert 500 == 400\n +  where 500 = <Response [500]>.status_code","time":{"start":1694355487268,"stop":1694355487319,"duration":51}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d2341d2e5ffa4bca.json","parameterValues":["12222222222222222222222222222222222222222222222222222222222222222222222222222222222"]}
