{"uid":"814fc25960d4a016","name":"POST /tasks","fullName":"tests.5 test_tasks.test_tasks#test_4_create_task","historyId":"a8a96cb31656508bec6132c407ad851b","time":{"start":1694355295268,"stop":1694355295374,"duration":106},"status":"failed","statusMessage":"AssertionError: assert {'history': {'id': 3388, 'projectName': None, 'state': None, 'taskId': 7073, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T14:14:55.346Z', ...}} == 200\n +  where {'history': {'id': 3388, 'projectName': None, 'state': None, 'taskId': 7073, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T14:14:55.346Z', ...}} = <bound method Response.json of <Response [201]>>()\n +    where <bound method Response.json of <Response [201]>> = <Response [201]>.json","statusTrace":"login_tasks = <requests.sessions.Session object at 0x0000013E8AFF7F50>, name = '1'\n\n    @allure.title(\"POST /tasks\")\n    @pytest.mark.parametrize('name', valid_names)\n    def test_4_create_task(login_tasks, name):\n        project = login_tasks.get(HOST + '/projects/all-projects').json()[0]\n        project_stage_id = project[\"stages\"][0][\"id\"]\n        print(\"stageid: \", project_stage_id)\n        response = login_tasks.post(HOST + '/tasks', json={\n            \"name\": name,\n            \"stageId\": project_stage_id,\n            \"order\": 0,\n            \"responsibleUserId\": None,\n            \"description\": \"string\",\n            \"color\": \"string\",\n            \"dateBegin\": time_now(),\n            \"dateEnd\": time_now()\n        })\n>       assert response.json() == 200\nE       AssertionError: assert {'history': {'id': 3388, 'projectName': None, 'state': None, 'taskId': 7073, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T14:14:55.346Z', ...}} == 200\nE        +  where {'history': {'id': 3388, 'projectName': None, 'state': None, 'taskId': 7073, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T14:14:55.346Z', ...}} = <bound method Response.json of <Response [201]>>()\nE        +    where <bound method Response.json of <Response [201]>> = <Response [201]>.json\n\ntests\\5 test_tasks\\test_tasks.py:62: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"database","time":{"start":1694355294313,"stop":1694355294322,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"login_tasks","time":{"start":1694355294323,"stop":1694355295006,"duration":683},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert {'history': {'id': 3388, 'projectName': None, 'state': None, 'taskId': 7073, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T14:14:55.346Z', ...}} == 200\n +  where {'history': {'id': 3388, 'projectName': None, 'state': None, 'taskId': 7073, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T14:14:55.346Z', ...}} = <bound method Response.json of <Response [201]>>()\n +    where <bound method Response.json of <Response [201]>> = <Response [201]>.json","statusTrace":"login_tasks = <requests.sessions.Session object at 0x0000013E8AFF7F50>, name = '1'\n\n    @allure.title(\"POST /tasks\")\n    @pytest.mark.parametrize('name', valid_names)\n    def test_4_create_task(login_tasks, name):\n        project = login_tasks.get(HOST + '/projects/all-projects').json()[0]\n        project_stage_id = project[\"stages\"][0][\"id\"]\n        print(\"stageid: \", project_stage_id)\n        response = login_tasks.post(HOST + '/tasks', json={\n            \"name\": name,\n            \"stageId\": project_stage_id,\n            \"order\": 0,\n            \"responsibleUserId\": None,\n            \"description\": \"string\",\n            \"color\": \"string\",\n            \"dateBegin\": time_now(),\n            \"dateEnd\": time_now()\n        })\n>       assert response.json() == 200\nE       AssertionError: assert {'history': {'id': 3388, 'projectName': None, 'state': None, 'taskId': 7073, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T14:14:55.346Z', ...}} == 200\nE        +  where {'history': {'id': 3388, 'projectName': None, 'state': None, 'taskId': 7073, ...}, 'task': {'blockReason': None, 'color': 'string', 'cover': None, 'createdAt': '2023-09-10T14:14:55.346Z', ...}} = <bound method Response.json of <Response [201]>>()\nE        +    where <bound method Response.json of <Response [201]>> = <Response [201]>.json\n\ntests\\5 test_tasks\\test_tasks.py:62: AssertionError","steps":[],"attachments":[{"uid":"d580495853c20f5d","name":"stdout","source":"d580495853c20f5d.txt","type":"text/plain","size":15}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"login_tasks::0","time":{"start":1694355295445,"stop":1694355295467,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"database::0","time":{"start":1694355295468,"stop":1694355295468,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests.5 test_tasks"},{"name":"suite","value":"test_tasks"},{"name":"host","value":"WIN-V4MLJNPG1BI"},{"name":"thread","value":"8976-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.5 test_tasks.test_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"name","value":"'1'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"814fc25960d4a016.json","parameterValues":["'1'"]}
